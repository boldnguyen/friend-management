// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FriendConnection is an object representing the database table.
type FriendConnection struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID1   int       `boil:"user_id1" json:"user_id1" toml:"user_id1" yaml:"user_id1"`
	UserID2   int       `boil:"user_id2" json:"user_id2" toml:"user_id2" yaml:"user_id2"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *friendConnectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendConnectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendConnectionColumns = struct {
	ID        string
	UserID1   string
	UserID2   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID1:   "user_id1",
	UserID2:   "user_id2",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var FriendConnectionTableColumns = struct {
	ID        string
	UserID1   string
	UserID2   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "friend_connections.id",
	UserID1:   "friend_connections.user_id1",
	UserID2:   "friend_connections.user_id2",
	CreatedAt: "friend_connections.created_at",
	UpdatedAt: "friend_connections.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FriendConnectionWhere = struct {
	ID        whereHelperint
	UserID1   whereHelperint
	UserID2   whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"friend_connections\".\"id\""},
	UserID1:   whereHelperint{field: "\"friend_connections\".\"user_id1\""},
	UserID2:   whereHelperint{field: "\"friend_connections\".\"user_id2\""},
	CreatedAt: whereHelpertime_Time{field: "\"friend_connections\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"friend_connections\".\"updated_at\""},
}

// FriendConnectionRels is where relationship names are stored.
var FriendConnectionRels = struct {
	UserID1User string
	UserID2User string
}{
	UserID1User: "UserID1User",
	UserID2User: "UserID2User",
}

// friendConnectionR is where relationships are stored.
type friendConnectionR struct {
	UserID1User *User `boil:"UserID1User" json:"UserID1User" toml:"UserID1User" yaml:"UserID1User"`
	UserID2User *User `boil:"UserID2User" json:"UserID2User" toml:"UserID2User" yaml:"UserID2User"`
}

// NewStruct creates a new relationship struct
func (*friendConnectionR) NewStruct() *friendConnectionR {
	return &friendConnectionR{}
}

func (r *friendConnectionR) GetUserID1User() *User {
	if r == nil {
		return nil
	}
	return r.UserID1User
}

func (r *friendConnectionR) GetUserID2User() *User {
	if r == nil {
		return nil
	}
	return r.UserID2User
}

// friendConnectionL is where Load methods for each relationship are stored.
type friendConnectionL struct{}

var (
	friendConnectionAllColumns            = []string{"id", "user_id1", "user_id2", "created_at", "updated_at"}
	friendConnectionColumnsWithoutDefault = []string{"user_id1", "user_id2"}
	friendConnectionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	friendConnectionPrimaryKeyColumns     = []string{"id"}
	friendConnectionGeneratedColumns      = []string{}
)

type (
	// FriendConnectionSlice is an alias for a slice of pointers to FriendConnection.
	// This should almost always be used instead of []FriendConnection.
	FriendConnectionSlice []*FriendConnection

	friendConnectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendConnectionType                 = reflect.TypeOf(&FriendConnection{})
	friendConnectionMapping              = queries.MakeStructMapping(friendConnectionType)
	friendConnectionPrimaryKeyMapping, _ = queries.BindMapping(friendConnectionType, friendConnectionMapping, friendConnectionPrimaryKeyColumns)
	friendConnectionInsertCacheMut       sync.RWMutex
	friendConnectionInsertCache          = make(map[string]insertCache)
	friendConnectionUpdateCacheMut       sync.RWMutex
	friendConnectionUpdateCache          = make(map[string]updateCache)
	friendConnectionUpsertCacheMut       sync.RWMutex
	friendConnectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single friendConnection record from the query.
func (q friendConnectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FriendConnection, error) {
	o := &FriendConnection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for friend_connections")
	}

	return o, nil
}

// All returns all FriendConnection records from the query.
func (q friendConnectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FriendConnectionSlice, error) {
	var o []*FriendConnection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FriendConnection slice")
	}

	return o, nil
}

// Count returns the count of all FriendConnection records in the query.
func (q friendConnectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count friend_connections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q friendConnectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if friend_connections exists")
	}

	return count > 0, nil
}

// UserID1User pointed to by the foreign key.
func (o *FriendConnection) UserID1User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID1),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UserID2User pointed to by the foreign key.
func (o *FriendConnection) UserID2User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID2),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUserID1User allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendConnectionL) LoadUserID1User(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendConnection interface{}, mods queries.Applicator) error {
	var slice []*FriendConnection
	var object *FriendConnection

	if singular {
		var ok bool
		object, ok = maybeFriendConnection.(*FriendConnection)
		if !ok {
			object = new(FriendConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendConnection))
			}
		}
	} else {
		s, ok := maybeFriendConnection.(*[]*FriendConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendConnectionR{}
		}
		args[object.UserID1] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendConnectionR{}
			}

			args[obj.UserID1] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserID1User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserID1FriendConnections = append(foreign.R.UserID1FriendConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID1 == foreign.ID {
				local.R.UserID1User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserID1FriendConnections = append(foreign.R.UserID1FriendConnections, local)
				break
			}
		}
	}

	return nil
}

// LoadUserID2User allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendConnectionL) LoadUserID2User(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendConnection interface{}, mods queries.Applicator) error {
	var slice []*FriendConnection
	var object *FriendConnection

	if singular {
		var ok bool
		object, ok = maybeFriendConnection.(*FriendConnection)
		if !ok {
			object = new(FriendConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendConnection))
			}
		}
	} else {
		s, ok := maybeFriendConnection.(*[]*FriendConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendConnectionR{}
		}
		args[object.UserID2] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendConnectionR{}
			}

			args[obj.UserID2] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserID2User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserID2FriendConnections = append(foreign.R.UserID2FriendConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID2 == foreign.ID {
				local.R.UserID2User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserID2FriendConnections = append(foreign.R.UserID2FriendConnections, local)
				break
			}
		}
	}

	return nil
}

// SetUserID1User of the friendConnection to the related item.
// Sets o.R.UserID1User to related.
// Adds o to related.R.UserID1FriendConnections.
func (o *FriendConnection) SetUserID1User(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friend_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id1"}),
		strmangle.WhereClause("\"", "\"", 2, friendConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID1 = related.ID
	if o.R == nil {
		o.R = &friendConnectionR{
			UserID1User: related,
		}
	} else {
		o.R.UserID1User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserID1FriendConnections: FriendConnectionSlice{o},
		}
	} else {
		related.R.UserID1FriendConnections = append(related.R.UserID1FriendConnections, o)
	}

	return nil
}

// SetUserID2User of the friendConnection to the related item.
// Sets o.R.UserID2User to related.
// Adds o to related.R.UserID2FriendConnections.
func (o *FriendConnection) SetUserID2User(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friend_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id2"}),
		strmangle.WhereClause("\"", "\"", 2, friendConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID2 = related.ID
	if o.R == nil {
		o.R = &friendConnectionR{
			UserID2User: related,
		}
	} else {
		o.R.UserID2User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserID2FriendConnections: FriendConnectionSlice{o},
		}
	} else {
		related.R.UserID2FriendConnections = append(related.R.UserID2FriendConnections, o)
	}

	return nil
}

// FriendConnections retrieves all the records using an executor.
func FriendConnections(mods ...qm.QueryMod) friendConnectionQuery {
	mods = append(mods, qm.From("\"friend_connections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"friend_connections\".*"})
	}

	return friendConnectionQuery{q}
}

// FindFriendConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriendConnection(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FriendConnection, error) {
	friendConnectionObj := &FriendConnection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"friend_connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, friendConnectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from friend_connections")
	}

	return friendConnectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FriendConnection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no friend_connections provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(friendConnectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendConnectionInsertCacheMut.RLock()
	cache, cached := friendConnectionInsertCache[key]
	friendConnectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendConnectionAllColumns,
			friendConnectionColumnsWithDefault,
			friendConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendConnectionType, friendConnectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendConnectionType, friendConnectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"friend_connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"friend_connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into friend_connections")
	}

	if !cached {
		friendConnectionInsertCacheMut.Lock()
		friendConnectionInsertCache[key] = cache
		friendConnectionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the FriendConnection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FriendConnection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	friendConnectionUpdateCacheMut.RLock()
	cache, cached := friendConnectionUpdateCache[key]
	friendConnectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendConnectionAllColumns,
			friendConnectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update friend_connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"friend_connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, friendConnectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendConnectionType, friendConnectionMapping, append(wl, friendConnectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update friend_connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for friend_connections")
	}

	if !cached {
		friendConnectionUpdateCacheMut.Lock()
		friendConnectionUpdateCache[key] = cache
		friendConnectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q friendConnectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for friend_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for friend_connections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"friend_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, friendConnectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in friendConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all friendConnection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FriendConnection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no friend_connections provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(friendConnectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	friendConnectionUpsertCacheMut.RLock()
	cache, cached := friendConnectionUpsertCache[key]
	friendConnectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			friendConnectionAllColumns,
			friendConnectionColumnsWithDefault,
			friendConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			friendConnectionAllColumns,
			friendConnectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert friend_connections, could not build update column list")
		}

		ret := strmangle.SetComplement(friendConnectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(friendConnectionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert friend_connections, could not build conflict column list")
			}

			conflict = make([]string, len(friendConnectionPrimaryKeyColumns))
			copy(conflict, friendConnectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"friend_connections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(friendConnectionType, friendConnectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(friendConnectionType, friendConnectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert friend_connections")
	}

	if !cached {
		friendConnectionUpsertCacheMut.Lock()
		friendConnectionUpsertCache[key] = cache
		friendConnectionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single FriendConnection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FriendConnection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FriendConnection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendConnectionPrimaryKeyMapping)
	sql := "DELETE FROM \"friend_connections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from friend_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for friend_connections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q friendConnectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no friendConnectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friend_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friend_connections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"friend_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendConnectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friendConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friend_connections")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FriendConnection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFriendConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"friend_connections\".* FROM \"friend_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendConnectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FriendConnectionSlice")
	}

	*o = slice

	return nil
}

// FriendConnectionExists checks if the FriendConnection row exists.
func FriendConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"friend_connections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if friend_connections exists")
	}

	return exists, nil
}

// Exists checks if the FriendConnection row exists.
func (o *FriendConnection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FriendConnectionExists(ctx, exec, o.ID)
}
